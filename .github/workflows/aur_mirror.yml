name: AUR Mirror (Sharded PR, brute retries)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "23 3 * * *"   # daily @ 03:23 UTC

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: aurchy-sync
  cancel-in-progress: false

env:
  RSYNC_SRC: rsync://aur.archlinux.org/aur

jobs:
  shard:
    name: Fetch shard (${{ matrix.shard }})
    runs-on: ubuntu-latest
    timeout-minutes: 1080
    strategy:
      fail-fast: false
      max-parallel: 38
      matrix:
        shard: [0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,"_","-"]
    steps:
      - name: Install rsync & prep
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync
          mkdir -p out/aur

      - name: Rsync shard with endless 60s retries
        shell: bash
        run: |
          set -euo pipefail
          shard="${{ matrix.shard }}"
          echo "Fetching shard prefix: '$shard*' from ${RSYNC_SRC}"
          attempt=0
          while true; do
            attempt=$((attempt+1))
            echo ":: Attempt $attempt — $(date -u)"
            # -4 to prefer IPv4; include only this prefix; exclude everything else.
            # We only need top-level entries like "<pkgname>/".
            if rsync -4 -av --timeout=60 \
                 --include="${shard}*/" \
                 --exclude='*' \
                 "${RSYNC_SRC}/" out/aur/; then
              echo "Shard '${shard}' fetched successfully on attempt $attempt"
              break
            fi
            echo "Shard '${shard}' failed (attempt $attempt). Sleeping 60s and retrying…"
            sleep 60
          done

      - name: Pack shard
        run: |
          tar -C out -cf shard-${{ matrix.shard }}.tar aur

      - name: Upload shard artifact
        uses: actions/upload-artifact@v4
        with:
          name: shard-${{ matrix.shard }}
          path: shard-${{ matrix.shard }}.tar
          retention-days: 45

  assemble:
    name: Assemble & PR
    needs: shard
    runs-on: ubuntu-latest
    timeout-minutes: 1080
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all shard artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: shard-*
          path: shards
          merge-multiple: false

      - name: Merge shards into aur/
        shell: bash
        run: |
          set -euo pipefail
          rm -rf aur
          mkdir -p aur
          find shards -name 'shard-*.tar' -print0 | while IFS= read -r -d '' t; do
            rm -rf _shard && mkdir _shard
            tar -xf "$t" -C _shard
            rsync -a _shard/aur/ aur/
            rm -rf _shard
          done
          # Normalize perms for stable diffs
          find aur -type d -print0 | xargs -0 chmod 755
          find aur -type f -print0 | xargs -0 chmod 644

      - name: Configure git author
        run: |
          git config user.name  "aurchy-bot"
          git config user.email "bot@neuralnuance.com"

      - name: Commit if changed
        id: commit
        shell: bash
        run: |
          git add aur
          if git diff --cached --quiet; then
            echo "changed=0" >> $GITHUB_OUTPUT
            echo "No changes detected."
          else
            SNAPSHOT_TS="$(date -u +'%Y-%m-%d %H:%M UTC')"
            git commit -m "AUR mirror snapshot: ${SNAPSHOT_TS}"
            echo "changed=1" >> $GITHUB_OUTPUT
          fi

      - name: Create/Update PR
        if: steps.commit.outputs.changed == '1'
        uses: peter-evans/create-pull-request@v6
        with:
          title: "AUR mirror update ($(date -u +'%Y-%m-%d %H:%M UTC'))"
          body: |
            Sharded AUR snapshot into `aur/`.

            Source: ${{ env.RSYNC_SRC }}
            Notes:
            - Direct rsync to aur.archlinux.org (Finland).
            - Each shard retries every 60s until success (bounded by job timeout).
            - IPv4 forced (-4) to dodge v6 routing quirks.
          branch: "sync/aur-$(date -u +'%Y%m%d-%H%M')"
          labels: "aur, sync, automated"
          draft: true
          signoff: true
          add-paths: |
            aur/**
          token: ${{ secrets.GITHUB_TOKEN }}
